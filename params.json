{"name":"Griddler","tagline":"Simplify receiving email.","body":"Griddler\r\n========\r\n\r\n[![Build Status](https://travis-ci.org/thoughtbot/griddler.png?branch=master)](https://travis-ci.org/thoughtbot/griddler)\r\n[![Code Climate](https://codeclimate.com/github/thoughtbot/griddler.png)](https://codeclimate.com/github/thoughtbot/griddler)\r\n\r\n### Receive emails in your Rails app\r\n\r\nGriddler is a Rails engine (full plugin) that provides an endpoint for the\r\n[SendGrid parse api](http://sendgrid.com/docs/API%20Reference/Webhooks/parse.html),\r\n[Cloudmailin parse api](http://cloudmailin.com),\r\n[Postmark parse api](http://developer.postmarkapp.com/developer-inbound-parse.html) or\r\n[Mandrill parse api](http://help.mandrill.com/entries/21699367-Inbound-Email-Processing-Overview)\r\nthat hands off a built email object to a class implemented by you.\r\n\r\nTutorials\r\n---------\r\n\r\n* SendGrid has done a\r\n  [great tutorial](http://blog.sendgrid.com/receiving-email-in-your-rails-app-with-griddler/)\r\n  on integrating Griddler with your application.\r\n* And of course, view our own blog post on the subject over at\r\n  [Giant Robots](http://robots.thoughtbot.com/post/42286882447/handle-incoming-email-with-griddler).\r\n\r\nInstallation\r\n------------\r\n\r\nAdd griddler to your application's Gemfile and run `bundle install`:\r\n\r\n```ruby\r\ngem 'griddler'\r\n```\r\n\r\nGriddler comes with a default endpoint that will be displayed at the bottom\r\nof the output of `rake routes`. If there is a previously defined route that\r\nmatches `/email_processor` -- or you would like to rename the matched path -- you\r\nmay add the route to the desired position in routes.rb with the following:\r\n\r\n```ruby\r\npost '/email_processor' => 'griddler/emails#create'\r\n```\r\n\r\nDefaults\r\n--------\r\n\r\nBy default Griddler will look for a class to be created in your application\r\ncalled EmailProcessor with a class method implemented, named process, taking\r\nin one argument (presumably `email`). For example, in `./lib/email_processor.rb`:\r\n\r\n```ruby\r\nclass EmailProcessor\r\n  def self.process(email)\r\n    # all of your application-specific code here - creating models,\r\n    # processing reports, etc\r\n  end\r\nend\r\n```\r\n\r\nThe contents of the `email` object passed into your process method is an object\r\nthat responds to:\r\n\r\n* `.to`\r\n* `.from`\r\n* `.subject`\r\n* `.body`\r\n* `.raw_text`\r\n* `.raw_html`\r\n* `.raw_body`\r\n* `.attachments`\r\n* `.headers`\r\n* `.raw_headers`\r\n\r\nEach of those has some sensible defaults.\r\n\r\n`.from`, `.raw_body`, `.raw_headers`, and `.subject` will contain the obvious\r\nvalues found in the email, the raw values from those fields.\r\n\r\n`.body` will contain the full contents of the email body **unless** there is a\r\nline in the email containing the string `-- Reply ABOVE THIS LINE --`. In that\r\ncase `.body` will contain everything before that line.\r\n\r\n`.to` will contain all of the text before the email's \"@\" character. We've found\r\nthat this is the most often used portion of the email address and consider it to\r\nbe the token we'll key off of for interaction with our application.\r\n\r\n`.attachments` will contain an array of attachments as multipart/form-data files\r\nwhich can be passed off to attachment libraries like Carrierwave or Paperclip.\r\n\r\n`.headers` will contain a hash of header names and values as parsed by the Mail\r\ngem. Headers will only be parsed if the adapter supports a headers option.\r\n\r\nConfiguration Options\r\n---------------------\r\n\r\nAn initializer can be created to control some of the options in Griddler. Defaults\r\nare shown below with sample overrides following. In `config/initializer/griddler.rb`:\r\n\r\n```ruby\r\nGriddler.configure do |config|\r\n  config.processor_class = EmailProcessor # MyEmailProcessor\r\n  config.to = :token # :full, :email, :hash\r\n  # :raw    => 'AppName <s13.6b2d13dc6a1d33db7644@mail.myapp.com>'\r\n  # :email  => 's13.6b2d13dc6a1d33db7644@mail.myapp.com'\r\n  # :token  => 's13.6b2d13dc6a1d33db7644'\r\n  # :hash   => { raw: '', email: '', token: '', host: '' }\r\n  config.reply_delimiter = '-- REPLY ABOVE THIS LINE --'\r\n  config.email_service = :sendgrid\r\nend\r\n```\r\n\r\n* `config.processor_class` is the class Griddler will use to handle your incoming emails.\r\n* `config.reply_delimiter` is the string searched for that will split your body.\r\n* `config.to` is the format of the returned value for the `:to` key in\r\nthe email object. `:hash` will return all options within a -- (surprise!) -- hash.\r\n* `config.email_service` tells Griddler which email service you are using. The supported\r\nemail service options are `:sendgrid` (the default), `:cloudmailin` (expects\r\nmultipart format), `:postmark` and `:mandrill`.\r\n\r\nTesting In Your App\r\n-------------------\r\n\r\nYou may want to create a factory for when testing the integration of Griddler into\r\nyour application. If you're using factory\\_girl this can be accomplished with the\r\nfollowing sample factory.\r\n\r\n```ruby\r\nfactory :email, class: OpenStruct do\r\n  # Assumes Griddler.configure.to is :hash (default)\r\n  to [{ raw: 'to_user@email.com', email: 'to_user@email.com', token: 'to_user', host: 'email.com' }]\r\n  from 'user@email.com'\r\n  subject 'email subject'\r\n  body 'Hello!'\r\n  attachments {[]}\r\n\r\n  trait :with_attachment do\r\n    attachments {[\r\n      ActionDispatch::Http::UploadedFile.new({\r\n        filename: 'img.png',\r\n        type: 'image/png',\r\n        tempfile: File.new(\"#{File.expand_path File.dirname(__FILE__)}/fixtures/img.png\")\r\n      })\r\n    ]}\r\n  end\r\nend\r\n```\r\n\r\nBear in mind, if you plan on using the `:with_attachment` trait, that this\r\nexample assumes your factories are in `spec/factories.rb` and you have\r\nan image file in `spec/fixtures/`.\r\n\r\nTo use it in your test(s) just build with `email = build(:email)`\r\nor `email = build(:email, :with_attachment)`.\r\n\r\nAdapters\r\n--------\r\n\r\n`Griddler::Email` expects certain parameters to be in place for proper parsing\r\nto occur. When writing an adapter, ensure that the `normalized_params` method\r\nof your adapter returns a hash with these keys:\r\n\r\n* `:to` The recipient field\r\n* `:from` The sender field\r\n* `:subject` Email subject\r\n* `:text` The text body of the email\r\n* `:html` The html body of the email, nil or empty string if not present\r\n* `:attachments` (can be an empty array) Array of attachments to the email\r\n* `:headers` (optional) The raw headers of the email\r\n* `:charsets` (optional) A JSON string containing the character sets of the\r\n  fields extracted from the message\r\n\r\nUpgrading to Griddler 0.5.0\r\n---------------------------\r\n\r\nBecause of an issue with the way Griddler handled recipients in the `To` header,\r\na breaking change was introduced in Griddler 0.5.0 that requires a minor change\r\nto `EmailProcessor` or `processor_class`.\r\n\r\nPreviously, a single address was returned from `Griddler::Email#to`. Moving\r\nforward, this field will always be an array. Generally speaking, you will want\r\nto do something like this to handle the change:\r\n\r\n```ruby\r\n# before\r\ndef initialize(email)\r\n  @to = email.to\r\n  @from = email.from\r\n  @body = email.body\r\nend\r\n\r\n# after\r\ndef initialize(email)\r\n  @to = pick_meaningful_recipient(email.to)\r\n  @from = email.from\r\n  @body = email.body\r\nend\r\n\r\nprivate\r\n\r\ndef pick_meaningful_recipient(recipients)\r\n  recipients.find { |address| address =~ /@mydomain.com$/ }\r\nend\r\n```\r\n\r\nUsing Griddler with Mandrill\r\n----------------------------\r\n\r\nWhen adding a webhook in their administration panel, Mandrill will issue a HEAD\r\nrequest to check if the webhook is valid (see\r\n[Adding Routes](http://help.mandrill.com/entries/21699367-Inbound-Email-Processing-Overview)).\r\nIf the HEAD request fails, Mandrill will not allow you to add the webhook.\r\nSince Griddler is only configured to handle POST requests, you will not be able\r\nto add the webhook as-is. To solve this, add a temporary route to your\r\napplication that can handle the HEAD request:\r\n\r\n```ruby\r\n# routes.rb\r\nget '/email_processor', :to => proc { [200, {}, [\"OK\"]] }\r\n```\r\n\r\nOnce you have correctly configured Mandrill, you can go ahead and delete this code.\r\n\r\nMore Information\r\n----------------\r\n\r\n* [SendGrid](http://www.sendgrid.com)\r\n* [SendGrid Parse API](http://www.sendgrid.com/docs/API Reference/Webhooks/parse.html)\r\n* [Cloudmailin](http://cloudmailin.com)\r\n* [Cloudmailin Docs](http://docs.cloudmailin.com/)\r\n* [Postmark](http://postmarkapp.com)\r\n* [Postmark Docs](http://developer.postmarkapp.com/)\r\n* [Mandrill](http://mandrill.com)\r\n* [Mandrill Docs](http://help.mandrill.com/forums/21092258-Inbound-Email-Processing)\r\n\r\nCredits\r\n-------\r\n\r\nGriddler was written by Caleb Thompson and Joel Oliveira.\r\n\r\nLarge portions of the codebase were extracted from thoughtbot's\r\n[Trajectory](http://www.apptrajectory.com).\r\n\r\n![thoughtbot](http://thoughtbot.com/images/tm/logo.png)\r\n\r\nThe names and logos for thoughtbot are trademarks of thoughtbot, inc.\r\n\r\nLicense\r\n-------\r\n\r\nGriddler is Copyright Â© 2013 Caleb Thompson, Joel Oliveira and thoughtbot. It is\r\nfree software, and may be redistributed under the terms specified in the LICENSE\r\nfile.\r\n","google":"UA-1485842-23","note":"Don't delete this file! It's used internally to help with page regeneration."}